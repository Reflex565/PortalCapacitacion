@page "/evaluacion/tema3"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject ciberseguridad.Data.UsuarioService UsuarioService
@inject ciberseguridad.Data.EvaluacionService EvaluacionService
@inject ProtectedSessionStorage SessionStorage

<h2 class="titulo-evaluacion">Evaluación: Tema 3 - Hacking</h2>

@if (calificacionAnterior >= 0)
{
    <div class="alerta-calificacion">
        Ya habías realizado esta evaluación. Obtuviste <strong>@calificacionAnterior de 5</strong>
    </div>
}

<div class="quiz-box">
    <h5>1. ¿Qué es el hacking?</h5>
    @foreach (var opcion in opciones1)
    {
        <button class="opcion @(GetClaseBoton(respuesta1, opcion, "a"))" @onclick="() => SeleccionarOpcion(1, opcion)">
            @textos1[opcion]
        </button>
    }
</div>

<div class="quiz-box">
    <h5>2. ¿Cuál es el objetivo del hacking malicioso (black hat)?</h5>
    @foreach (var opcion in opciones2)
    {
        <button class="opcion @(GetClaseBoton(respuesta2, opcion, "c"))" @onclick="() => SeleccionarOpcion(2, opcion)">
            @textos2[opcion]
        </button>
    }
</div>

<div class="quiz-box">
    <h5>3. ¿Cómo se llama el tipo de hacker que actúa con permiso y ética?</h5>
    @foreach (var opcion in opciones3)
    {
        <button class="opcion @(GetClaseBoton(respuesta3, opcion, "b"))" @onclick="() => SeleccionarOpcion(3, opcion)">
            @textos3[opcion]
        </button>
    }
</div>

<div class="quiz-box">
    <h5>4. ¿Cuál de los siguientes es un método común usado por los hackers maliciosos?</h5>
    @foreach (var opcion in opciones4)
    {
        <button class="opcion @(GetClaseBoton(respuesta4, opcion, "a"))" @onclick="() => SeleccionarOpcion(4, opcion)">
            @textos4[opcion]
        </button>
    }
</div>

<div class="quiz-box">
    <h5>5. ¿Cuál es la principal diferencia entre un hacker ético y uno malicioso?</h5>
    @foreach (var opcion in opciones5)
    {
        <button class="opcion @(GetClaseBoton(respuesta5, opcion, "c"))" @onclick="() => SeleccionarOpcion(5, opcion)">
            @textos5[opcion]
        </button>
    }
</div>

<div class="botones-navegacion">
    <button class="btn-navegacion" @onclick="VolverAlTema">&larr; Volver al Tema</button>
    <button class="btn-navegacion" @onclick="VerificarRespuestas" disabled="@(!TodoRespondido)" hidden="@bloquear">Verificar Respuestas</button>
    <button class="btn-navegacion" @onclick="FinalizarCurso">Finalizar Curso &rarr;</button>
</div>

@code {
    int usuarioId;
    int calificacionAnterior = -1;
    bool verificando = false;
    bool bloquear = false;
    string respuesta1 = "", respuesta2 = "", respuesta3 = "", respuesta4 = "", respuesta5 = "";

    bool TodoRespondido =>
        !string.IsNullOrEmpty(respuesta1) &&
        !string.IsNullOrEmpty(respuesta2) &&
        !string.IsNullOrEmpty(respuesta3) &&
        !string.IsNullOrEmpty(respuesta4) &&
        !string.IsNullOrEmpty(respuesta5);

    Dictionary<string, string> textos1 = new()
    {
        { "a", "La acción de encontrar y explotar vulnerabilidades en sistemas informáticos" },
        { "b", "Crear contraseñas seguras" },
        { "c", "El uso de computadoras para navegar" }
    };
    Dictionary<string, string> textos2 = new()
    {
        { "a", "Fortalecer la seguridad de una empresa" },
        { "b", "Proteger los datos de los usuarios" },
        { "c", "Obtener beneficios personales a través del daño o el robo de información" }
    };
    Dictionary<string, string> textos3 = new()
    {
        { "a", "Hacker malicioso" },
        { "b", "Hacker ético" },
        { "c", "Hacker gris" }
    };
    Dictionary<string, string> textos4 = new()
    {
        { "a", "Ataques de phishing y malware" },
        { "b", "Instalación de antivirus" },
        { "c", "Optimización del sistema operativo" }
    };
    Dictionary<string, string> textos5 = new()
    {
        { "a", "El tipo de computadora que prefieren" },
        { "b", "El sistema operativo que utilizan" },
        { "c", "La autorización y el propósito con que acceden a los sistemas" }
    };

    List<string> opciones1 = new() { "a", "b", "c" };
    List<string> opciones2 = new() { "a", "b", "c" };
    List<string> opciones3 = new() { "a", "b", "c" };
    List<string> opciones4 = new() { "a", "b", "c" };
    List<string> opciones5 = new() { "a", "b", "c" };

    void SeleccionarOpcion(int numero, string opcion)
    {
        if (bloquear) return;
        switch (numero)
        {
            case 1: respuesta1 = opcion; break;
            case 2: respuesta2 = opcion; break;
            case 3: respuesta3 = opcion; break;
            case 4: respuesta4 = opcion; break;
            case 5: respuesta5 = opcion; break;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var resultado = await SessionStorage.GetAsync<Usuario>("usuario_logeado");
            if (resultado.Success && resultado.Value != null)
            {
                usuarioId = resultado.Value.Id;
                await CargarRespuestasAnteriores("Tema 3");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "No se encontró sesión activa");
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error al obtener sesión: {ex.Message}");
        }
    }

    async Task CargarRespuestasAnteriores(string tema)
    {
        try
        {
            var resultado = await EvaluacionService.ObtenerResultadoPorTema(usuarioId, tema);
            if (resultado != null)
            {
                var respuestas = await EvaluacionService.ObtenerRespuestasPorResultado(resultado.Id);
                foreach (var r in respuestas)
                {
                    switch (r.PreguntaNumero)
                    {
                        case 1: respuesta1 = r.RespuestaSeleccionada; break;
                        case 2: respuesta2 = r.RespuestaSeleccionada; break;
                        case 3: respuesta3 = r.RespuestaSeleccionada; break;
                        case 4: respuesta4 = r.RespuestaSeleccionada; break;
                        case 5: respuesta5 = r.RespuestaSeleccionada; break;
                    }
                }
                calificacionAnterior = resultado.Calificacion;
                bloquear = true;
                verificando = true;
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error al cargar respuestas anteriores: {ex.Message}");
        }
    }

    string GetClaseBoton(string respuesta, string opcion, string correcta)
    {
        if (!verificando)
            return respuesta == opcion ? "seleccionada" : "";

        if (respuesta == opcion && opcion == correcta)
            return "correcto";

        if (respuesta == opcion && opcion != correcta)
            return "incorrecto";

        return "";
    }

    void VolverAlTema() => Navigation.NavigateTo("/temario/tema3");
    void FinalizarCurso() => Navigation.NavigateTo("/");

    async Task VerificarRespuestas()
    {
        verificando = true;
        bloquear = true;
        int puntaje = 0;
        if (respuesta1 == "a") puntaje++;
        if (respuesta2 == "c") puntaje++;
        if (respuesta3 == "b") puntaje++;
        if (respuesta4 == "a") puntaje++;
        if (respuesta5 == "c") puntaje++;

        await JS.InvokeVoidAsync("alert", $"Tu puntaje es: {puntaje} de 5");

        try
        {
            var resultado = new ResultadoEvaluacion
            {
                UsuarioId = usuarioId,
                Tema = "Tema 3",
                Calificacion = puntaje
            };

            int resultadoId = await EvaluacionService.GuardarResultadoEvaluacion(resultado);

            var respuestas = new List<RespuestaEvaluacion>
            {
                new() { ResultadoId = resultadoId, PreguntaNumero = 1, RespuestaSeleccionada = respuesta1 },
                new() { ResultadoId = resultadoId, PreguntaNumero = 2, RespuestaSeleccionada = respuesta2 },
                new() { ResultadoId = resultadoId, PreguntaNumero = 3, RespuestaSeleccionada = respuesta3 },
                new() { ResultadoId = resultadoId, PreguntaNumero = 4, RespuestaSeleccionada = respuesta4 },
                new() { ResultadoId = resultadoId, PreguntaNumero = 5, RespuestaSeleccionada = respuesta5 },
            };

            await EvaluacionService.GuardarRespuestas(respuestas);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error al guardar resultados: {ex.Message}");
        }
    }
}










<style>
    .titulo-evaluacion {
        text-align: center;
        margin: 2rem 0 1rem 0;
        color: #1a4faa;
        font-weight: bold;
    }

    .quiz-box {
        background-color: rgba(255, 255, 255, 0.95);
        padding: 1.5rem;
        margin: 1.2rem auto;
        border-left: 5px solid #1a4faa;
        border-radius: 10px;
        max-width: 850px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
    }

        .quiz-box h5 {
            margin-bottom: 1rem;
            color: #0b3d91;
        }

    .opcion {
        display: block;
        width: 100%;
        text-align: left;
        padding: 10px 15px;
        margin: 0.3rem 0;
        border: none;
        border-radius: 6px;
        background-color: #f2f2f2;
        transition: all 0.3s ease;
        font-size: 1rem;
    }

        .opcion:hover {
            background-color: #dce8ff;
            cursor: pointer;
        }

    .seleccionada {
        background-color: #cce5ff !important;
        border-left: 6px solid #339af0;
    }

    .correcto {
        background-color: #c6f6d5 !important;
        border-left: 6px solid #2e8b57;
    }

    .incorrecto {
        background-color: #ffe0e0 !important;
        border-left: 6px solid #cc0000;
    }

    .botones-navegacion {
        display: flex;
        justify-content: space-between;
        margin: 2rem auto;
        max-width: 850px;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .btn-navegacion {
        padding: 0.7rem 1.4rem;
        background-color: #1a4faa;
        color: white;
        border: none;
        border-radius: 6px;
        font-weight: bold;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
        min-width: 150px;
    }

        .btn-navegacion:hover {
            background-color: #123b77;
        }
</style> 